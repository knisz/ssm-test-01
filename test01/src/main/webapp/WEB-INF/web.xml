<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
  <!--修改web.xml文件前需修改版本,默认版本2.3太低,改成4.0-->


  <!-- 1、注册spring监听器,用于在Tomcat启动时创建spring容器-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:conf/applicationContext.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--  2、SpringMVC的前端控制器，拦截所有请求 -->
  <!--声明SpringMVC核心对象DispatcherServlet
      DispatcherServlet对象在创建的过程中会自动创建springmvc容器对象,读取springmvc的配置文件
      从而把配置文件的对象都创建好
      相当于:
          //读取配置文件,创建容器
          WebApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml");
          //把容器对象放入到ServletContext中
          getServletContext().setAttribute(key,ctx);
  -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--此时只有首次访问时创建DispatcherServlet的实例对象-->

    <!--启动Tomcat时默认会寻找/WEB-INF/<servlet-name>-servlet.xml,下面设置自定义读取位置-->
    <init-param>
      <!--springmvc的配置文件的位置的属性-->
      <param-name>contextConfigLocation</param-name>
      <!--指定自定义文件的位置-->
      <param-value>classpath:conf/dispatcher-servlet.xml</param-value>
    </init-param>
    <!--设置Tomcat启动后自动创建DispatcherServlet对象,load-on-start后的数字越小表示启动顺序越靠前,正整数-->
    <load-on-startup>1</load-on-startup>

  </servlet>
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <!--
        使用框架的时候， url-pattern可以使用两种值
        1. 使用扩展名方式， 语法 *.xxx , xxx是自定义的扩展名。 常用的方式 *.do, *.action, *.mvc等等
           http://localhost:8080/myweb/some.do
           http://localhost:8080/myweb/other.do
           上述的请求都会交于指定的servlet处理

        2.使用斜杠 "/"拦截所有请求，但可能存在静态资源文件访问问题
    -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>


  <!-- 3.注册声明过滤器，解决post请求乱码的问题-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--设置项目中使用的字符编码-->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
    <!--强制请求对象（HttpServletRequest）使用encoding编码的值-->
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <!--强制应答对象（HttpServletResponse）使用encoding编码的值-->
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <!--
       /*:表示强制所有的请求先通过过滤器处理。
    -->
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--  4.使用Rest风格的URI，可以把页面发过来的post请求转为指定的delete或者put请求-->
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

</web-app>